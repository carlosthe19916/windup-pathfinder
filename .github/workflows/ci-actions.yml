name: CI

on:
  push:
    paths-ignore:
      - 'README.md'
  pull_request:
    types: [assigned, opened, synchronize, reopened, ready_for_review, edited]
    paths-ignore:
      - 'README.md'
  schedule:
    - cron:  '0 0 * * *'

env:
  JVM_TEST_MAVEN_OPTS: "-e -B"
  NATIVE_TEST_MAVEN_OPTS: "-e -B -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.1.0-java11"

jobs:
  build-jdk11:
    name: "JDK 11 Build"
    runs-on: ubuntu-latest
    # Skip draft PRs and those with WIP in the subject, rerun as soon as its removed
    if: "github.event_name != 'pull_request' || ( \
           github.event.pull_request.draft == false && \
           github.event.pull_request.state != 'closed' && \
           contains(github.event.pull_request.title, 'wip ') == false && \
           contains(github.event.pull_request.title, '[wip]') == false && \
           (
             github.event.action != 'edited' || \
             contains(github.event.changes.title.from, 'wip ') || \
             contains(github.event.changes.title.from, '[wip]') \
           ) \
         )"
    steps:
      - uses: actions/checkout@v2
      - uses: n1hility/cancel-previous-runs@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Compute cache restore key
        # Always recompute on a push so that the maven repo doesnt grow indefinitely with old versions
        run: |
            if ${{ github.event_name == 'pull_request' }}; then echo "::set-env name=COMPUTED_RESTORE_KEY::q2maven-"; fi
      - name: Cache Maven Repository
        id: cache-maven
        uses: n1hility/cache@v2
        with:
          path: ~/.m2/repository
          # Improves the reusability of the cache to limit key changes
          key: q2maven-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ env.COMPUTED_RESTORE_KEY }}
          restore-only: ${{ github.event_name == 'pull_request' }}
      - name: Build
        run: |
          mvn -e -B  -DskipTests=true -DskipDocs clean install
      - name: Tar Maven Repo
        shell: bash
        run: tar -czvf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v1
        with:
          name: maven-repo
          path: maven-repo.tgz

  linux-jvm-tests:
    name: JDK 11 JVM Tests
    timeout-minutes: 120
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java-version }}
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: mvn test
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T -
      - name: Upload failure archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-linux-jvm11
          path: 'test-reports.tgz'

  native-tests:
    name: Native Tests
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~

      - name: Build with Maven
        run: |
          eval mvn $NATIVE_TEST_MAVEN_OPTS -Pnative install

      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: native-test-reports
          path: 'test-reports.tgz'

      - name: Prepare native files archive
        shell: bash
        run: find . -name 'xsender-server-*-runner' -type f | tar -czvf native-artifacts.tgz -T -
      - name: Upload Archive
        uses: actions/upload-artifact@v1
        with:
          name: native-artifacts
          path: 'native-artifacts.tgz'

#  linux-jvm-tests-ee:
#    name: JDK 11 JVM Tests EE
#    timeout-minutes: 120
#    needs: build-jdk11
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK ${{ matrix.java-version }}
#        # Uses sha for added security since tags can be updated
#        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
#        with:
#          java-version: 11
#      - name: Download Maven Repo
#        uses: actions/download-artifact@v1
#        with:
#          name: maven-repo
#          path: .
#      - name: Extract Maven Repo
#        shell: bash
#        run: tar -xzvf maven-repo.tgz -C ~
#      - name: Build with Maven
#        run: mvn test -P services -Dopenubl.storage.type=s3 -Dopenubl.event-manager=jms
#      - name: Prepare failure archive (if maven failed)
#        if: failure()
#        shell: bash
#        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T -
#      - name: Upload failure archive (if maven failed)
#        uses: actions/upload-artifact@v1
#        if: failure()
#        with:
#          name: test-reports-linux-jvm11
#          path: 'test-reports.tgz'

  java-artifacts:
    name: Java Artifacts
    needs: build-jdk11
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn -DskipTests package
      - name: Prepare artifacts
        shell: bash
        run: |
          find api/target -name 'lib' -o -name 'xsender-server-api-*-runner.jar' | tar -czvf jdk-artifacts.tgz -T -
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: jdk-artifacts
          path: 'jdk-artifacts.tgz'

  container-images:
    name: Container Images
    needs: java-artifacts
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: jdk-artifacts
          path: .
      - name: Extract artifacs
        shell: bash
        run: tar -xzvf jdk-artifacts.tgz
      - name: Publish container
        # Uses sha for added security since tags can be updated
        uses: elgohr/Publish-Docker-Github-Action@b2f63259b466ca5a4be395c392546de447450334
        with:
          name: projectopenubl/xsender-server
          dockerfile: api/src/main/docker/Dockerfile.jvm
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          snapshot: false
          tags: "master"
